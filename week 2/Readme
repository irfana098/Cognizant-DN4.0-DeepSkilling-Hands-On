# Week 2 – Java Testing with JUnit & Mockito  
**Cognizant Digital Nurture Internship**

## Overview  
This week focused on strengthening the fundamentals of **unit testing** in Java using **JUnit** and **Mockito**. The primary goal was to understand how to test Java applications effectively using assertions, mocking, and structured test practices.

## Tools and Technologies Used  
- Java 22  
- IntelliJ IDEA Community Edition 2025  
- Apache Maven  
- JUnit 4.13.2  
- Mockito 5.7.0  

## Key Learnings  

### JUnit  
- Writing basic test cases with `@Test` annotation  
- Using assertion methods like `assertEquals`, `assertTrue`, `assertFalse`, `assertNull`, and `assertNotNull`  
- Implementing setup and teardown methods using `@Before` and `@After`  
- Understanding the Arrange-Act-Assert (AAA) pattern  

### Mockito  
- Creating mock objects using `Mockito.mock()`  
- Stubbing method responses with `when(...).thenReturn(...)`  
- Verifying method calls using `verify()`  
- Isolating external dependencies during testing  

### Testing Design Patterns  
- Applying the Arrange-Act-Assert pattern for clarity  
- Ensuring test cases are modular, independent, and repeatable  
- Handling exceptions and validating error scenarios  

## Project Structure  


calculator/
├── pom.xml
├── src/
│   ├── main/java/org/example/
│   │   ├── Calculator.java
│   │   ├── ExternalApi.java
│   │   └── MyService.java
│   └── test/java/org/example/
│       ├── CalculatorTest.java
│       ├── AssertionsTest.java
│       └── MyServiceTest.java


## How to Run Tests

### Using IntelliJ IDEA  
- Open the project  
- Right-click on any test class (e.g., `CalculatorTest.java`)  
- Select **Run** to execute tests  

### Using Maven CLI  
Run the following command inside the project directory:  
```bash
mvn clean test

## Sample Test Output

Tests run: 6, Failures: 0, Errors: 0, Skipped: 0
BUILD SUCCESS


## Conclusion

This week provided a solid understanding of writing and organizing test cases in Java. It introduced best practices for test-driven development and ensured that code is reliable and maintainable. Mastering unit testing with JUnit and Mockito is essential for any Java developer aiming to build production-ready applications.

